"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ JIRA –∑–∞–¥–∞—á
"""

import argparse
import logging
import sys
import os
from typing import Optional
from jira_classifier.config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('jira_classifier.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

from jira_classifier.pipeline import JiraClassificationPipeline


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è JIRA –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é LLM",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ .env:
   python main_jira_classifier.py --jql "project = MYPROJ"

2. –° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á:
   python main_jira_classifier.py --jql "project = MYPROJ" --max-tasks 500

3. –°–ª–æ–∂–Ω—ã–π JQL –∑–∞–ø—Ä–æ—Å:
   python main_jira_classifier.py --jql "project = MYPROJ AND status != Closed AND created >= -30d"

4. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env:
   python main_jira_classifier.py --jql "project = MYPROJ" --server https://other-jira.com --username other@email.com --token other_token

4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:
   python main_jira_classifier.py --tasks-file tasks_MYPROJ_20231201_120000.json

5. –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –±–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:
   python main_jira_classifier.py --jql "project = MYPROJ" --fetch-only

6. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è JQL:
   python main_jira_classifier.py --jql-help

7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
   python main_jira_classifier.py --config-status

8. –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞:
   python main_jira_classifier.py --create-env
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument(
        "--jql", "-q",
        type=str,
        help="JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'project = MYPROJ AND status != Closed')"
    )
    
    parser.add_argument(
        "--server", "-s",
        type=str,
        help="URL JIRA —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç JIRA_SERVER –∏–∑ .env)"
    )
    
    parser.add_argument(
        "--username", "-u",
        type=str,
        help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç JIRA_USERNAME –∏–∑ .env)"
    )
    
    parser.add_argument(
        "--token", "-t",
        type=str,
        help="API —Ç–æ–∫–µ–Ω JIRA (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç JIRA_API_TOKEN –∏–∑ .env)"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument(
        "--max-tasks",
        type=int,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    
    parser.add_argument(
        "--jql-help",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è JQL –∑–∞–ø—Ä–æ—Å–æ–≤"
    )
    
    parser.add_argument(
        "--config-status",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"
    )
    
    parser.add_argument(
        "--create-env",
        action="store_true",
        help="–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞"
    )
    
    parser.add_argument(
        "--sample-size",
        type=int,
        default=200,
        help="–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 200)"
    )
    
    # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    parser.add_argument(
        "--tasks-file",
        type=str,
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ JIRA)"
    )
    
    parser.add_argument(
        "--fetch-only",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ JIRA –±–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    )
    
    parser.add_argument(
        "--no-save-intermediate",
        action="store_true",
        help="–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    )
    
    args = parser.parse_args()
    
    try:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if args.config_status:
            config.print_config_status()
            return
            
        if args.create_env:
            config.create_env_template()
            return
            
        if args.jql_help:
            show_jql_help(args)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JIRA (–∏–∑ .env –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
        jira_server = args.server or config.jira_server
        jira_username = args.username or config.jira_username
        jira_token = args.token or config.jira_api_token
        jql_query = args.jql or config.default_jql_query
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not args.tasks_file:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é JIRA
            if not config.has_jira_config():
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JIRA!")
                print("\nüí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω–æ –∏–∑:")
                print("   1. python main_jira_classifier.py --create-env  (—Å–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª)")
                print("   2. python main_jira_classifier.py --config-status  (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
                print("   3. –£–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: --server, --username, --token")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JQL –∑–∞–ø—Ä–æ—Å
            if not jql_query:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω JQL –∑–∞–ø—Ä–æ—Å!")
                print("\nüí° –£–∫–∞–∂–∏—Ç–µ JQL –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:")
                print("   1. –í –∞—Ä–≥—É–º–µ–Ω—Ç–µ: --jql \"project = MYPROJ\"")
                print("   2. –í .env —Ñ–∞–π–ª–µ: DEFAULT_JQL_QUERY=project = MYPROJ")
                print("   3. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å: python main_jira_classifier.py --jql-help")
                return
        
        if args.tasks_file:
            # –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            run_from_saved_tasks(args.tasks_file, args.sample_size)
        else:
            # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å JIRA
            if args.fetch_only:
                logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á")
                fetch_tasks_only(args, jql_query)
            else:
                logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
                run_full_pipeline(args, jql_query)
        
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def run_full_pipeline(args, jql_query: str):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        jql_query: JQL –∑–∞–ø—Ä–æ—Å (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JIRA
    jira_server = args.server or config.jira_server
    jira_username = args.username or config.jira_username
    jira_token = args.token or config.jira_api_token
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = JiraClassificationPipeline(
        jira_server=jira_server,
        jira_username=jira_username,
        jira_api_token=jira_token,
        jira_verify_ssl=config.jira_verify_ssl
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    results = pipeline.run_full_pipeline(
        jql_query=jql_query,
        max_tasks=args.max_tasks,
        sample_size=args.sample_size,
        save_intermediate=not args.no_save_intermediate
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("="*60)
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {results['tasks_count']}")
    print(f"üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {results['categories_count']}")
    print(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {results['avg_confidence']:.1f}%")
    
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:")
    for report_type, filepath in results['reports'].items():
        print(f"   - {report_type}: {filepath}")
    
    if results.get('recommendations'):
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in results['recommendations']:
            print(f"   - {rec}")
    
    print("\n‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ CSV —Ñ–∞–π–ª—ã –≤ Excel –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")


def run_from_saved_tasks(tasks_file: str, sample_size: int):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        tasks_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–¥–∞—á–∞–º–∏
        sample_size: –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
    """
    if not os.path.exists(tasks_file):
        raise FileNotFoundError(f"–§–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {tasks_file}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω (–±–µ–∑ JIRA –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    pipeline = JiraClassificationPipeline(
        jira_server="dummy",
        jira_username="dummy", 
        jira_api_token="dummy"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    results = pipeline.run_from_saved_tasks(tasks_file, sample_size)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("="*60)
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {results['tasks_count']}")
    print(f"üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {results['categories_count']}")
    print(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {results['avg_confidence']:.1f}%")
    
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:")
    for report_type, filepath in results['reports'].items():
        print(f"   - {report_type}: {filepath}")
    
    if results.get('recommendations'):
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in results['recommendations']:
            print(f"   - {rec}")


def fetch_tasks_only(args, jql_query: str):
    """
    –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ JIRA –±–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        jql_query: JQL –∑–∞–ø—Ä–æ—Å (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    """
    from jira_classifier.jira_client import JiraClient
    from datetime import datetime
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JIRA
    jira_server = args.server or config.jira_server
    jira_username = args.username or config.jira_username
    jira_token = args.token or config.jira_api_token
    
    # –°–æ–∑–¥–∞–µ–º JIRA –∫–ª–∏–µ–Ω—Ç
    jira_client = JiraClient(jira_server, jira_username, jira_token, config.jira_verify_ssl)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º JQL
    validation = jira_client.validate_jql(jql_query)
    if not validation['valid']:
        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JQL –∑–∞–ø—Ä–æ—Å: {validation['message']}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = jira_client.search_issues_by_jql(
        jql=jql_query,
        max_results=args.max_tasks
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"tasks_jql_{timestamp}.json"
    jira_client.save_tasks_to_json(tasks, filename)
    
    print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª: {filename}")
    print(f"JQL –∑–∞–ø—Ä–æ—Å: {jql_query}")
    if args.jql:
        print("–ò—Å—Ç–æ—á–Ω–∏–∫ JQL: –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
    else:
        print("–ò—Å—Ç–æ—á–Ω–∏–∫ JQL: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (.env)")
    print(f"–î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print(f"python main_jira_classifier.py --tasks-file {filename}")


def show_jql_help(args):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è JQL –∑–∞–ø—Ä–æ—Å–æ–≤
    
    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    from jira_classifier.jira_client import JiraClient
    
    print("\n" + "="*60)
    print("–ü–û–î–°–ö–ê–ó–ö–ò –ü–û JQL –ó–ê–ü–†–û–°–ê–ú")
    print("="*60)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JIRA
    jira_server = args.server or config.jira_server
    jira_username = args.username or config.jira_username
    jira_token = args.token or config.jira_api_token
    
    if all([jira_server, jira_username, jira_token]):
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            jira_client = JiraClient(jira_server, jira_username, jira_token, config.jira_verify_ssl)
            suggestions = jira_client.get_jql_suggestions()
            
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã JQL –∑–∞–ø—Ä–æ—Å–æ–≤:")
            for example in suggestions['examples']:
                print(f"   {example}")
            
            if 'issue_types' in suggestions:
                print(f"\nüè∑Ô∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:")
                for issue_type in suggestions['issue_types'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"   {issue_type}")
            
            if 'statuses' in suggestions:
                print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:")
                for status in suggestions['statuses'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"   {status}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")
    
    print("\nüîç –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è JQL:")
    print("   project, status, assignee, reporter, issuetype, priority")
    print("   created, updated, resolved, labels, component")
    
    print("\n‚öôÔ∏è  –û–ø–µ—Ä–∞—Ç–æ—Ä—ã:")
    print("   =, !=, >, <, >=, <=, ~, !~, IN, NOT IN, IS, IS NOT")
    
    print("\nüìÖ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∞—Ç:")
    print("   now(), startOfDay(), endOfDay(), startOfWeek(), endOfWeek()")
    print("   startOfMonth(), endOfMonth(), currentUser()")
    
    print("\nüí° –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("   project = MYPROJ AND status != Closed")
    print("   project = MYPROJ AND created >= -30d")
    print("   project = MYPROJ AND assignee = currentUser()")
    print("   project = MYPROJ AND issuetype in (Bug, Task)")
    print("   project = MYPROJ AND updated >= startOfWeek()")
    
    print(f"\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://support.atlassian.com/jira-service-management/docs/use-advanced-search-with-jira-query-language-jql/")


if __name__ == "__main__":
    main()
