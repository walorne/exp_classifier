"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
from typing import Optional, Dict, Any
from dotenv import load_dotenv
import logging

logger = logging.getLogger(__name__)


class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, env_file: str = '.env'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            env_file: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
        """
        self.env_file = env_file
        self._load_env()
        self._jira_config = self._load_jira_config()
        self._defaults = self._load_defaults()
    
    def _load_env(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.env_file):
            load_dotenv(self.env_file)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ {self.env_file}")
        else:
            logger.warning(f"–§–∞–π–ª {self.env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    
    def _load_jira_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é JIRA"""
        return {
            # –°—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            'server': os.getenv('JIRA_SERVER'),
            'username': os.getenv('JIRA_USERNAME'),
            'api_token': os.getenv('JIRA_API_TOKEN'),
            'verify_ssl': os.getenv('JIRA_VERIFY_SSL', 'false').lower() == 'true',
            
            # –ù–æ–≤—ã–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'url': os.getenv('JIRA_URL'),
            'token': os.getenv('JIRA_TOKEN'),
            'cert_path': os.getenv('JIRA_CERT_PATH')
        }
    
    def _load_defaults(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'max_tasks': int(os.getenv('DEFAULT_MAX_TASKS', '1000')),
            'sample_size': int(os.getenv('DEFAULT_SAMPLE_SIZE', '200')),
            'save_intermediate': os.getenv('DEFAULT_SAVE_INTERMEDIATE', 'true').lower() == 'true',
            'jql_query': os.getenv('DEFAULT_JQL_QUERY', '')
        }
    
    @property
    def jira_server(self) -> Optional[str]:
        """URL JIRA —Å–µ—Ä–≤–µ—Ä–∞"""
        return self._jira_config['server']
    
    @property
    def jira_username(self) -> Optional[str]:
        """–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è JIRA"""
        return self._jira_config['username']
    
    @property
    def jira_api_token(self) -> Optional[str]:
        """API —Ç–æ–∫–µ–Ω JIRA"""
        return self._jira_config['api_token']
    
    @property
    def jira_verify_ssl(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç JIRA"""
        return self._jira_config['verify_ssl']
    
    # –ù–æ–≤—ã–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    @property
    def jira_url(self) -> Optional[str]:
        """URL JIRA —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
        return self._jira_config['url']
    
    @property
    def jira_token(self) -> Optional[str]:
        """–¢–æ–∫–µ–Ω JIRA (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
        return self._jira_config['token']
    
    @property
    def jira_cert_path(self) -> Optional[str]:
        """–ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É JIRA"""
        return self._jira_config['cert_path']
    
    @property
    def default_max_tasks(self) -> int:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self._defaults['max_tasks']
    
    @property
    def default_sample_size(self) -> int:
        """–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self._defaults['sample_size']
    
    @property
    def default_save_intermediate(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self._defaults['save_intermediate']
    
    @property
    def default_jql_query(self) -> str:
        """JQL –∑–∞–ø—Ä–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self._defaults['jql_query']
    
    def has_jira_config(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JIRA"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if self.jira_url and self.jira_token:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        return all([
            self.jira_server,
            self.jira_username,
            self.jira_api_token
        ])
    
    def get_missing_jira_config(self) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ JIRA"""
        missing = []
        if not self.jira_server:
            missing.append('JIRA_SERVER')
        if not self.jira_username:
            missing.append('JIRA_USERNAME')
        if not self.jira_api_token:
            missing.append('JIRA_API_TOKEN')
        return missing
    
    def validate_jira_config(self) -> tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é JIRA
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if self.has_jira_config():
            return True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JIRA –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
        
        missing = self.get_missing_jira_config()
        error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã JIRA: {', '.join(missing)}"
        return False, error_msg
    
    def get_jira_config_dict(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é JIRA –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ JIRA
        
        Raises:
            ValueError: –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è
        """
        is_valid, error_msg = self.validate_jira_config()
        if not is_valid:
            raise ValueError(error_msg)
        
        return {
            'server': self.jira_server,
            'username': self.jira_username,
            'api_token': self.jira_api_token
        }
    
    def print_config_status(self) -> None:
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n" + "="*50)
        print("–°–¢–ê–¢–£–° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("="*50)
        
        # JIRA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        print("\nüîß JIRA –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        
        # –ù–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if self.jira_url and self.jira_token:
            print("   üìã –§–æ—Ä–º–∞—Ç: —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π (JIRA_URL + JIRA_TOKEN)")
            print(f"   ‚úÖ URL: {self.jira_url}")
            print(f"   ‚úÖ –¢–æ–∫–µ–Ω: {'*' * 10}...{self.jira_token[-4:]}")
            if self.jira_cert_path:
                print(f"   ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {self.jira_cert_path}")
            else:
                print("   ‚ö†Ô∏è  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: –Ω–µ —É–∫–∞–∑–∞–Ω (SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
        
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        elif self.jira_server or self.jira_username or self.jira_api_token:
            print("   üìã –§–æ—Ä–º–∞—Ç: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π (JIRA_SERVER + JIRA_USERNAME + JIRA_API_TOKEN)")
            if self.jira_server:
                print(f"   ‚úÖ –°–µ—Ä–≤–µ—Ä: {self.jira_server}")
            else:
                print("   ‚ùå –°–µ—Ä–≤–µ—Ä: –Ω–µ —É–∫–∞–∑–∞–Ω (JIRA_SERVER)")
            
            if self.jira_username:
                print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.jira_username}")
            else:
                print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –Ω–µ —É–∫–∞–∑–∞–Ω (JIRA_USERNAME)")
            
            if self.jira_api_token:
                print(f"   ‚úÖ API —Ç–æ–∫–µ–Ω: {'*' * 10}...{self.jira_api_token[-4:]}")
            else:
                print("   ‚ùå API —Ç–æ–∫–µ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω (JIRA_API_TOKEN)")
        
        else:
            print("   ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JIRA –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print(f"\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
        print(f"   üìä –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á: {self.default_max_tasks}")
        print(f"   üéØ –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: {self.default_sample_size}")
        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∞–π–ª—ã: {'–î–∞' if self.default_save_intermediate else '–ù–µ—Ç'}")
        print(f"   üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL: {'–î–∞' if self.jira_verify_ssl else '–ù–µ—Ç'}")
        if self.default_jql_query:
            print(f"   üîç JQL –∑–∞–ø—Ä–æ—Å: {self.default_jql_query}")
        else:
            print(f"   üîç JQL –∑–∞–ø—Ä–æ—Å: –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        is_valid, error_msg = self.validate_jira_config()
        if is_valid:
            print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print(f"\n‚ùå {error_msg}")
            print(f"\nüí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
            print(f"   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –∫–∞–∫ .env")
            print(f"   2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            print(f"   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
    
    def create_env_template(self, filename: str = '.env') -> None:
        """
        –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        """
        template = """# JIRA Configuration
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ JIRA

# URL –≤–∞—à–µ–≥–æ JIRA —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ —Å–ª—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ)
# === –£–ü–†–û–©–ï–ù–ù–´–ô –§–û–†–ú–ê–¢ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) ===
# URL –≤–∞—à–µ–≥–æ JIRA —Å–µ—Ä–≤–µ—Ä–∞
JIRA_URL=https://your-company.atlassian.net

# –¢–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (Personal Access Token –∏–ª–∏ API Token)
JIRA_TOKEN=your_token_here

# –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)
JIRA_CERT_PATH=/path/to/certificate.crt

# === –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô –§–û–†–ú–ê–¢ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===
# JIRA_SERVER=https://your-company.atlassian.net
# JIRA_USERNAME=your-email@company.com
# JIRA_API_TOKEN=your_api_token_here

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
DEFAULT_MAX_TASKS=1000
DEFAULT_SAMPLE_SIZE=200
DEFAULT_SAVE_INTERMEDIATE=true

# JQL –∑–∞–ø—Ä–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö)
# –ü—Ä–∏–º–µ—Ä—ã:
# DEFAULT_JQL_QUERY=project = MYPROJ
# DEFAULT_JQL_QUERY=project = MYPROJ AND status != Closed
DEFAULT_JQL_QUERY=

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (false –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏)
JIRA_VERIFY_SSL=false
"""
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(template)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {filename}")
            print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JIRA")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()
