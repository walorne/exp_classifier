"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ JIRA –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel
"""
import pandas as pd
import os
import re
from datetime import datetime
from clients.jira_client import get_jira_client


def clean_description(desc):
    """–û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not desc:
        return ''
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    desc = desc.replace('\n', ' ').replace('\r', ' ')
    desc = ' '.join(desc.split())  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    
    # –£–¥–∞–ª—è–µ–º JIRA —Ä–∞–∑–º–µ—Ç–∫—É
    desc = re.sub(r'\{[^}]*\}', '', desc)  # {code}, {quote}, etc.
    desc = re.sub(r'\[[^\]]*\]', '', desc)  # [~username], [link]
    desc = re.sub(r'h[1-6]\.\s*', '', desc)  # h1. h2. –∑–∞–≥–æ–ª–æ–≤–∫–∏
    desc = re.sub(r'\*[^*]*\*', '', desc)  # *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*
    desc = re.sub(r'_[^_]*_', '', desc)  # _–∫—É—Ä—Å–∏–≤_
    
    # –£–±–∏—Ä–∞–µ–º URL
    desc = re.sub(r'https?://\S+', '', desc)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    desc = re.sub(r'[^\w\s\-.,!?()]', ' ', desc, flags=re.UNICODE)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤
    desc = ' '.join(desc.split())
    
    return desc


def fetch_and_save_tasks(jql_query, data_folder="classification_data", chunk_size=100, max_results=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ JIRA –ø–æ JQL –∑–∞–ø—Ä–æ—Å—É —á–∞—Å—Ç—è–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Excel
    
    –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
    - –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ü–∏—è–º–∏ (chunk_size) –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å—Ä–∞–∑—É
    - –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π: key, summary, description, issuetype, timespent
    - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    
    Args:
        jql_query (str): JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
        data_folder (str): –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        chunk_size (int): —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
        max_results (int): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (None = –≤—Å–µ)
    
    Returns:
        pd.DataFrame: DataFrame —Å –∑–∞–¥–∞—á–∞–º–∏
        str: –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É –∑–∞–¥–∞—á
    """
    print(f"üîç –í—ã–ø–æ–ª–Ω—è—é JQL –∑–∞–ø—Ä–æ—Å —á–∞—Å—Ç—è–º–∏ –ø–æ {chunk_size} –∑–∞–¥–∞—á...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ JIRA
    jira = get_jira_client()
    
    # –°–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (–±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–ª–µ–π)
    try:
        total_count = jira.search_issues(jql_query, maxResults=0, fields='key').total
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {total_count}")
        
        if max_results and max_results < total_count:
            total_count = max_results
            print(f"üéØ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ: {max_results} –∑–∞–¥–∞—á")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {e}")
        print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Ä—Ü–∏—è–º–∏...")
        total_count = None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Ä—Ü–∏—è–º–∏
    all_data = []
    start_at = 0
    chunk_num = 1
    
    while True:
        try:
            print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Ä—Ü–∏—é {chunk_num} (–∑–∞–¥–∞—á–∏ {start_at + 1}-{start_at + chunk_size})...")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –µ—Å–ª–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –ª–∏–º–∏—Ç—É
            current_chunk_size = chunk_size
            if max_results and start_at + chunk_size > max_results:
                current_chunk_size = max_results - start_at
                
            if current_chunk_size <= 0:
                break
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—Ü–∏—é —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (–¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
            issues = jira.search_issues(
                jql_query, 
                startAt=start_at, 
                maxResults=current_chunk_size,
                fields='key,summary,description,issuetype,timespent'  # üî• –¢–û–õ–¨–ö–û –ù–£–ñ–ù–´–ï –ü–û–õ–Ø
            )
            
            if not issues:
                print("‚úÖ –ë–æ–ª—å—à–µ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                break
                
            print(f"   üì• –ü–æ–ª—É—á–µ–Ω–æ {len(issues)} –∑–∞–¥–∞—á")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ—Ä—Ü–∏–∏
            for issue in issues:
                all_data.append({
                    'key': issue.key,
                    'title': issue.fields.summary,
                    'description': clean_description(issue.fields.description),
                    'issuetype': issue.fields.issuetype.name,
                    'time_spent': getattr(issue.fields, 'timespent', 0) or 0,
                    'processing_stage': 'new',  # –≠—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    'category_id': '',          # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
                    'batch_processed': 0        # –ù–æ–º–µ—Ä –±–∞—Ç—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                })
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
            start_at += len(issues)
            chunk_num += 1
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–¥–∞—á —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
            if len(issues) < current_chunk_size:
                print("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                break
                
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
            if max_results and start_at >= max_results:
                print(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: {max_results} –∑–∞–¥–∞—á")
                break
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ü–∏–∏ {chunk_num}: {e}")
            if "401" in str(e):
                print("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω!")
                raise
            break

    if not all_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏!")
        raise Exception("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    df = pd.DataFrame(all_data)
    print(f"üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} –∑–∞–¥–∞—á")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    os.makedirs(data_folder, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ Excel
    main_tasks_file = os.path.join(data_folder, "tasks.xlsx")
    df.to_excel(main_tasks_file, index=False, sheet_name='Tasks')
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–¥–∞—á: {main_tasks_file}")
    
    return df, main_tasks_file
