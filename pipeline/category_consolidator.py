"""
–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
"""
import pandas as pd
import os
from datetime import datetime
from clients.ai_client import create_default_client
from utils.file_utils import safe_save_excel


def consolidate_categories(categories_df, target_count, llm_client):
    """–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    categories_text = ""
    for idx, row in categories_df.iterrows():
        keywords = row.get('–ö–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞', '') if pd.notna(row.get('–ö–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞', '')) else ''
        task_types = row.get('–¢–∏–ø—ã_–∑–∞–¥–∞—á', '') if pd.notna(row.get('–¢–∏–ø—ã_–∑–∞–¥–∞—á', '')) else ''
        
        categories_text += f"{idx+1}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}: {row['–û–ø–∏—Å–∞–Ω–∏–µ']}"
        if keywords:
            categories_text += f" | –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}"
        if task_types:
            categories_text += f" | –¢–∏–ø—ã –∑–∞–¥–∞—á: {task_types}"
        categories_text += "\n"
    
    prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é IT-–∑–∞–¥–∞—á. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–≠–¢–ê–ü 1 - –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
2. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã (UI/Frontend, API/Backend, Mobile, Data Processing)
3. –í—ã—è–≤–∏ –±–∏–∑–Ω–µ—Å-–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–ª–∞—Ç–µ–∂–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
4. –£—á—Ç–∏ —Ç–∏–ø—ã –∑–∞–¥–∞—á –∏ –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
5. –£—á—Ç–∏, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã, –Ω–µ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∏—Ö, –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!!!

–≠–¢–ê–ü 2 - –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø:
1. –û–±—ä–µ–¥–∏–Ω—è–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¢–û–õ–¨–ö–û –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ—è
2. –°–æ—Ö—Ä–∞–Ω—è–π –±–∏–∑–Ω–µ—Å-–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
3. –°–æ–∑–¥–∞–π —Ä–æ–≤–Ω–æ {target_count} –∏—Ç–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
4. –ù–ï–õ–¨–ó–Ø —É–¥–∞–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å!
5. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á
6. –ò–∑–±–µ–≥–∞–π –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É –∏—Ç–æ–≥–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –°–õ–û–ò –î–õ–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:
1. Frontend/UI —Å–ª–æ–π: UI/UX –∑–∞–¥–∞—á–∏, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
2. Backend/API —Å–ª–æ–π: —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞, API, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
3. Data —Å–ª–æ–π: –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
4. Mobile —Å–ª–æ–π: —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ iOS/Android, –º–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
5. Analytics —Å–ª–æ–π: —Å–æ–±—ã—Ç–∏—è, –º–µ—Ç—Ä–∏–∫–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
6. Navigation —Å–ª–æ–π: –ø–µ—Ä–µ—Ö–æ–¥—ã, deeplink, –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
7. Auth/Security —Å–ª–æ–π: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
8. Payment —Å–ª–æ–π: –ø–ª–∞—Ç–µ–∂–∏, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –±–æ–Ω—É—Å—ã

–≠—Ç–∏ —Å–ª–æ–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∏–º–µ—Ä—ã, –Ω–µ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∏—Ö, –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!!!

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:
‚úÖ "UI/UX –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏" + "–í–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã" + "–£–ª—É—á—à–µ–Ω–∏–µ UX/UI" ‚Üí "Frontend –∏ UI –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
‚úÖ "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API" + "API –æ—à–∏–±–∫–∏" + "Backend –ª–æ–≥–∏–∫–∞" ‚Üí "Backend –∏ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
‚úÖ "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö" + "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö" ‚Üí "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"
—ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä—ã, –Ω–æ –Ω–µ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∏—Ö, –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!!!

–ü–†–ò–ú–ï–†–´ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:
‚ùå "UI –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è" + "API –æ—à–∏–±–∫–∏" (—Ä–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∏)
‚ùå "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞" + "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å" (—Ä–∞–∑–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û" (—Å–ª–∏—à–∫–æ–º –æ–±—â–∞—è)


–ò–°–•–û–î–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:
{categories_text}

–ü–†–ê–í–ò–õ–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:
- –û–±—ä–µ–¥–∏–Ω—è–π –¢–û–õ–¨–ö–û –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ—è
- –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —á–µ—Ç–∫–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–º–µ–Ω
- –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
- –°–æ—Ö—Ä–∞–Ω—è–π –±–∏–∑–Ω–µ—Å-–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–ª–∞—Ç–µ–∂–∏, –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
- –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ {target_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –ö–∞–∂–¥–∞—è –∏—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ö –°–û–•–†–ê–ù–ï–ù–ò–Æ:
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
- –ü–ª–∞—Ç–µ–∂–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏  
- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ deeplink –æ–±—Ä–∞–±–æ—Ç–∫–∞
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å–æ–±—ã—Ç–∏—è

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π):
–ù–∞–∑–≤–∞–Ω–∏–µ;–û–ø–∏—Å–∞–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä:
API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏;–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –±–∞–≥–æ–≤;–ê–Ω–∞–ª–∏–∑, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ, –æ—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

–í–ê–ñ–ù–û:
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫  
- –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
- –†–æ–≤–Ω–æ {target_count} —Å—Ç—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ"""

    print(f"üîÑ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É—é {len(categories_df)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ {target_count}...")
    response = llm_client.simple_chat(prompt)
    return response


def parse_consolidated_categories(response_text):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = []
    lines = response_text.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        if not line or line.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ') or line.startswith('#'):
            continue
            
        parts = line.split(';')
        if len(parts) >= 2:
            categories.append({
                '–ù–∞–∑–≤–∞–Ω–∏–µ': parts[0].strip(),
                '–û–ø–∏—Å–∞–Ω–∏–µ': parts[1].strip()
            })
    
    return categories


def create_final_categories(categories_df, target_count, data_folder="classification_data", save_timestamped=True):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    
    Args:
        categories_df (pd.DataFrame): DataFrame —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        target_count (int): —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        data_folder (str): –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    
    Returns:
        pd.DataFrame: DataFrame —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        str: –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
    llm_client = create_default_client()
    
    # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if len(categories_df) > target_count:
        print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {len(categories_df)} ‚Üí {target_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        try:
            consolidated_response = consolidate_categories(categories_df, target_count, llm_client)
            consolidated_categories = parse_consolidated_categories(consolidated_response)
            
            if len(consolidated_categories) == target_count:
                # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                final_categories_df = pd.DataFrame(consolidated_categories)
                
                print(f"‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(final_categories_df)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                print("\nüìã –ò–¢–û–ì–û–í–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:")
                for idx, row in final_categories_df.iterrows():
                    print(f"{idx+1}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}")
                
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(consolidated_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–º–µ—Å—Ç–æ {target_count}")
                print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                final_categories_df = categories_df.copy()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            final_categories_df = categories_df.copy()
    else:
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —É–∂–µ {len(categories_df)} - –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        final_categories_df = categories_df.copy()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –∏—Ç–æ–≥–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏—Ç–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    main_final_file = os.path.join(data_folder, "final_categories.xlsx")
    success = safe_save_excel(final_categories_df, main_final_file, 'Final_Categories')
    
    if success:
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {main_final_file}")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {main_final_file}")
        return final_categories_df, None
    
    return final_categories_df, main_final_file
