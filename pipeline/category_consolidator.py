"""
–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
"""
import pandas as pd
import os
from datetime import datetime
from clients.ai_client import create_default_client
from utils.file_utils import safe_save_excel


def consolidate_categories(categories_df, target_count, llm_client):
    """–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    categories_text = ""
    for idx, row in categories_df.iterrows():
        categories_text += f"{idx+1}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}: {row['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
    
    prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ IT-–∑–∞–¥–∞—á.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–π–¥–∏ –ø–æ—Ö–æ–∂–∏–µ –ø–æ —Å–º—ã—Å–ª—É
2. –û–±—ä–µ–¥–∏–Ω–∏ –ø–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ–¥–Ω—É
3. –°–æ–∑–¥–∞–π —Ä–æ–≤–Ω–æ {target_count} –∏—Ç–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
4. –ù–ï–õ–¨–ó–Ø —É–¥–∞–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å!

–ò–°–•–û–î–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:
{categories_text}

–ü–†–ê–í–ò–õ–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:
- –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å –í–°–ï–• –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å - –æ—Å—Ç–∞–≤—å –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
- –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ {target_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π):
–ù–∞–∑–≤–∞–Ω–∏–µ;–û–ø–∏—Å–∞–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä:
API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏;–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –±–∞–≥–æ–≤;–ê–Ω–∞–ª–∏–∑, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ, –æ—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

–í–ê–ñ–ù–û:
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫  
- –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
- –†–æ–≤–Ω–æ {target_count} —Å—Ç—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ"""

    print(f"üîÑ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É—é {len(categories_df)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ {target_count}...")
    response = llm_client.simple_chat(prompt)
    return response


def parse_consolidated_categories(response_text):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = []
    lines = response_text.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        if not line or line.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ') or line.startswith('#'):
            continue
            
        parts = line.split(';')
        if len(parts) >= 2:
            categories.append({
                '–ù–∞–∑–≤–∞–Ω–∏–µ': parts[0].strip(),
                '–û–ø–∏—Å–∞–Ω–∏–µ': parts[1].strip()
            })
    
    return categories


def create_final_categories(categories_df, target_count, data_folder="classification_data", save_timestamped=True):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    
    Args:
        categories_df (pd.DataFrame): DataFrame —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        target_count (int): —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        data_folder (str): –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    
    Returns:
        pd.DataFrame: DataFrame —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        str: –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
    llm_client = create_default_client()
    
    # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if len(categories_df) > target_count:
        print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {len(categories_df)} ‚Üí {target_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        try:
            consolidated_response = consolidate_categories(categories_df, target_count, llm_client)
            consolidated_categories = parse_consolidated_categories(consolidated_response)
            
            if len(consolidated_categories) == target_count:
                # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                final_categories_df = pd.DataFrame(consolidated_categories)
                
                print(f"‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(final_categories_df)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                print("\nüìã –ò–¢–û–ì–û–í–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:")
                for idx, row in final_categories_df.iterrows():
                    print(f"{idx+1}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}")
                
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(consolidated_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–º–µ—Å—Ç–æ {target_count}")
                print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                final_categories_df = categories_df.copy()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            final_categories_df = categories_df.copy()
    else:
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —É–∂–µ {len(categories_df)} - –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        final_categories_df = categories_df.copy()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –∏—Ç–æ–≥–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏—Ç–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    main_final_file = os.path.join(data_folder, "final_categories.xlsx")
    success = safe_save_excel(final_categories_df, main_final_file, 'Final_Categories')
    
    if success:
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {main_final_file}")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {main_final_file}")
        return final_categories_df, None
    
    return final_categories_df, main_final_file
