"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é LLM
"""
import pandas as pd
import os
from datetime import datetime
from clients.ai_client import create_default_client
from utils.file_utils import safe_save_excel


def process_batch_for_categories(batch_tasks, batch_num, total_batches, llm_client):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    texts_for_classification = []
    for _, row in batch_tasks.iterrows():
        text = f"–¢–∏–ø: {row['issuetype']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {row['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {row['description']}\n–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {row['summary']}"
        texts_for_classification.append(text)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É IT-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ JIRA –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞–π –æ—Ç 3 –¥–æ 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞
2. –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
3. –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏ –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å —Ä–∞–±–æ—Ç—ã
4. –ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏—Ö –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
5. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–æ–ª—è "–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è" - —ç—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã–µ
6. –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–ó–ê–î–ê–ß–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê (–±–∞—Ç—á {batch_num}/{total_batches}):
{chr(10).join([f"{i+1}. {text}" for i, text in enumerate(texts_for_classification)])}

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π):
–ù–∞–∑–≤–∞–Ω–∏–µ;–û–ø–∏—Å–∞–Ω–∏–µ;–ö–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞;–¢–∏–ø—ã_–∑–∞–¥–∞—á


–í–ê–ñ–ù–û: 
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
- –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
# –ü—Ä–∏–º–µ—Ä:
# API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏;–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π;api,–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è,–Ω–∞—Å—Ç—Ä–æ–π–∫–∞,—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞;Task,Story
# –†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏;–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –±–∞–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ;–æ—à–∏–±–∫–∞,–±–∞–≥,–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,–æ—Ç–ª–∞–¥–∫–∞;Bug,Task

    print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–∞—Ç—á {batch_num}/{total_batches} ({len(batch_tasks)} –∑–∞–¥–∞—á)...")
    response = llm_client.simple_chat(prompt)
    return response


def parse_categories_response(response_text):
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = []
    lines = response_text.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        if not line or line.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ') or line.startswith('#'):
            continue
            
        parts = line.split(';')
        if len(parts) >= 4:
            categories.append({
                '–ù–∞–∑–≤–∞–Ω–∏–µ': parts[0].strip(),
                '–û–ø–∏—Å–∞–Ω–∏–µ': parts[1].strip(),
                '–ö–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞': parts[2].strip(),
                '–¢–∏–ø—ã_–∑–∞–¥–∞—á': parts[3].strip()
            })
    
    return categories


def generate_categories_from_tasks(tasks_df, batch_size=50, data_folder="classification_data", save_timestamped=True):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–¥–∞—á –±–∞—Ç—á–∞–º–∏
    
    Args:
        tasks_df (pd.DataFrame): DataFrame —Å –∑–∞–¥–∞—á–∞–º–∏
        batch_size (int): —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        data_folder (str): –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        save_timestamped (bool): —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    
    Returns:
        pd.DataFrame: DataFrame —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        str: –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    print(f"\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ {len(tasks_df)} –∑–∞–¥–∞—á...")
    
    # –°–æ–∑–¥–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
    llm_client = create_default_client()
    
    all_categories = []

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
    total_batches = (len(tasks_df) + batch_size - 1) // batch_size
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks_df)}")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π: {total_batches}")

    for i in range(0, len(tasks_df), batch_size):
        batch_num = (i // batch_size) + 1
        batch_tasks = tasks_df.iloc[i:i+batch_size]
        
        try:
            response = process_batch_for_categories(batch_tasks, batch_num, total_batches, llm_client)
            batch_categories = parse_categories_response(response)
            
            print(f"‚úÖ –ë–∞—Ç—á {batch_num}: –ø–æ–ª—É—á–µ–Ω–æ {len(batch_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            all_categories.extend(batch_categories)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {batch_num}: {e}")
            continue

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories_df = pd.DataFrame(all_categories)

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
    categories_df = categories_df.drop_duplicates(subset=['–ù–∞–∑–≤–∞–Ω–∏–µ'], keep='first')

    print(f"\nüìã –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories_df)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    main_categories_file = os.path.join(data_folder, "categories.xlsx")
    success = safe_save_excel(categories_df, main_categories_file, 'Categories')
    
    if success:
        if save_timestamped:
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {main_categories_file}")
        else:
            print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {main_categories_file}")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª: {main_categories_file}")
        return categories_df, None
    
    return categories_df, main_categories_file
