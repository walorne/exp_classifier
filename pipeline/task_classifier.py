"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π JIRA –∑–∞–¥–∞—á–∞–º
"""
import pandas as pd
import os
import re
import time
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
from clients.ai_client import create_default_client
from utils.file_utils import safe_save_excel


def load_tasks_and_categories(data_folder="classification_data"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
    
    tasks_file = os.path.join(data_folder, "tasks.xlsx")
    categories_file = os.path.join(data_folder, "final_categories.xlsx")
    
    if not os.path.exists(tasks_file):
        raise FileNotFoundError(f"–§–∞–π–ª –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {tasks_file}")
    
    if not os.path.exists(categories_file):
        raise FileNotFoundError(f"–§–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {categories_file}")
    
    tasks_df = pd.read_excel(tasks_file)
    categories_df = pd.read_excel(categories_file)
    
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks_df)}")
    print(f"üè∑Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories_df)}")
    
    return tasks_df, categories_df


def classify_single_task_with_retries(task_data, categories_df, max_retries=3):
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Args:
        task_data: tuple (index, task_row) - –∏–Ω–¥–µ–∫—Å –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        categories_df: DataFrame —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        max_retries: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    
    Returns:
        tuple: (index, category, success, error_msg)
    """
    index, task_row = task_data
    task_key = task_row.get('key', f'Task_{index}')
    
    for attempt in range(max_retries):
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
            llm_client = create_default_client()
            
            category = classify_single_task_with_llm(task_row, categories_df, llm_client)
            return index, category, True, None
            
        except Exception as e:
            error_msg = f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {str(e)}"
            
            if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                return index, "–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", False, error_msg
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            time.sleep(0.5 * (attempt + 1))
    
    return index, "–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"


def classify_single_task_with_llm(task_row, categories_df, llm_client):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é LLM"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    task_text = f"–¢–∏–ø: {task_row.get('issuetype', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    task_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task_row.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    task_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {task_row.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'summary' in task_row and pd.notna(task_row['summary']):
        task_text += f"–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {task_row['summary']}\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories_text = ""
    for _, cat_row in categories_df.iterrows():
        categories_text += f"- {cat_row['–ù–∞–∑–≤–∞–Ω–∏–µ']}: {cat_row['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è.

–ó–ê–î–ê–ß–ê –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:
{task_text}

–î–û–°–¢–£–ü–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:
{categories_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –í—ã–±–µ—Ä–∏ –¢–û–õ–¨–ö–û –û–î–ù–£ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
3. –£—á–∏—Ç—ã–≤–∞–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ä–∞–±–æ—Ç
4. –ü–†–ò–û–†–ò–¢–ï–¢ –∞–Ω–∞–ª–∏–∑–∞: –∏—Å–ø–æ–ª—å–∑—É–π –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–ª–µ "–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è" - —ç—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã–µ
5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.

–ü–†–ò–ú–ï–†:
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

–í–ï–†–ù–ò –¢–û–õ–¨–ö–û –ù–ê–ó–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò:"""

    try:
        response = llm_client.simple_chat(prompt)
        category_name = response.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        if category_name in categories_df['–ù–∞–∑–≤–∞–Ω–∏–µ'].values:
            return category_name
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            for _, cat_row in categories_df.iterrows():
                if category_name.lower() in cat_row['–ù–∞–∑–≤–∞–Ω–∏–µ'].lower() or cat_row['–ù–∞–∑–≤–∞–Ω–∏–µ'].lower() in category_name.lower():
                    return cat_row['–ù–∞–∑–≤–∞–Ω–∏–µ']
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ fallback
            fallback_category = categories_df.iloc[0]['–ù–∞–∑–≤–∞–Ω–∏–µ']
            return fallback_category
            
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")


def classify_batch_with_retries(batch_data, categories_df, max_retries=3):
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –±–∞—Ç—á –∑–∞–¥–∞—á —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Args:
        batch_data: tuple (tasks_batch, batch_num, total_batches)
        categories_df: DataFrame —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        max_retries: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    
    Returns:
        tuple: (batch_num, classifications_dict, success, error_msg)
    """
    tasks_batch, batch_num, total_batches = batch_data
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    llm_client = create_default_client()
    
    for attempt in range(max_retries):
        try:
            classifications = classify_tasks_with_llm(tasks_batch, categories_df, batch_num, total_batches, llm_client)
            return batch_num, classifications, True, None
            
        except Exception as e:
            error_msg = f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {str(e)}"
            if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                return batch_num, {}, False, error_msg
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            time.sleep(1.0 * (attempt + 1))
    
    return batch_num, {}, False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"


def classify_tasks_with_llm(tasks_batch, categories_df, batch_num, total_batches, llm_client):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –±–∞—Ç—á –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é LLM"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    categories_text = ""
    for idx, row in categories_df.iterrows():
        categories_text += f"{idx+1}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}: {row['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    tasks_text = ""
    for idx, (_, row) in enumerate(tasks_batch.iterrows()):
        tasks_text += f"{idx+1}. [{row['key']}] {row['title']}\n"
        if row.get('summary'):
            tasks_text += f"   –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {row['summary']}\n"
        if row['description']:
            desc = row['description']
            tasks_text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        tasks_text += f"   –¢–∏–ø: {row['issuetype']}\n\n"
    
    prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ IT-–∑–∞–¥–∞—á. –û–ø—Ä–µ–¥–µ–ª–∏ –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞.

–î–û–°–¢–£–ü–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:
{categories_text}

–ó–ê–î–ê–ß–ò –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò (–±–∞—Ç—á {batch_num}/{total_batches}):
{tasks_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –≤—ã–±–µ—Ä–∏ –û–î–ù–£ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
2. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3, ...)
3. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫—É—é
4. –ü–†–ò–û–†–ò–¢–ï–¢ –∞–Ω–∞–ª–∏–∑–∞: –∏—Å–ø–æ–ª—å–∑—É–π –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–ª–µ "–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è" - —ç—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã–µ
5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –í –§–û–†–ú–ê–¢–ï:
1;3
2;1
3;7
...

–ì–î–ï:
- –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ = –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ –±–∞—Ç—á–µ
- –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ = –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–í–ê–ñ–ù–û:
- –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
- –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
- {len(tasks_batch)} —Å—Ç—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ"""

    print(f"ü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é –±–∞—Ç—á {batch_num}/{total_batches} ({len(tasks_batch)} –∑–∞–¥–∞—á)...")
    response = llm_client.simple_chat(prompt)
    return response


def parse_classification_response(response_text, tasks_batch, categories_df):
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    results = []
    lines = response_text.strip().split('\n')
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    category_names = categories_df['–ù–∞–∑–≤–∞–Ω–∏–µ'].tolist()
    
    for line in lines:
        line = line.strip()
        if not line or ';' not in line:
            continue
            
        try:
            parts = line.split(';')
            if len(parts) >= 2:
                task_idx = int(parts[0]) - 1  # –ò–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 0)
                category_idx = int(parts[1]) - 1  # –ò–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
                if 0 <= task_idx < len(tasks_batch) and 0 <= category_idx < len(categories_df):
                    task_row = tasks_batch.iloc[task_idx]
                    category_name = category_names[category_idx]
                    
                    results.append({
                        'key': task_row['key'],
                        'category': category_name,
                        'category_id': category_idx + 1
                    })
                    
        except (ValueError, IndexError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ '{line}': {e}")
            continue
    
    return results


def classify_all_tasks(tasks_df, categories_df, batch_size=20, data_folder="classification_data", save_timestamped=True, max_workers=5, classification_mode="single", max_retries=3):
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é
    
    Args:
        tasks_df (pd.DataFrame): DataFrame —Å –∑–∞–¥–∞—á–∞–º–∏
        categories_df (pd.DataFrame): DataFrame —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        batch_size (int): —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è LLM (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ batch —Ä–µ–∂–∏–º–µ)
        data_folder (str): –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        save_timestamped (bool): —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        max_workers (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        classification_mode (str): —Ä–µ–∂–∏–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ("single" –∏–ª–∏ "batch")
        max_retries (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    Returns:
        pd.DataFrame: DataFrame —Å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        str: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if classification_mode == "single":
        print(f"\nüéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è {len(tasks_df)} –∑–∞–¥–∞—á –ø–æ –æ–¥–Ω–æ–π (–ø–æ—Ç–æ–∫–æ–≤: {max_workers})")
        return classify_tasks_single_mode(tasks_df, categories_df, data_folder, save_timestamped, max_workers, max_retries)
    else:
        print(f"\nüéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è {len(tasks_df)} –∑–∞–¥–∞—á –±–∞—Ç—á–∞–º–∏ (–ø–æ—Ç–æ–∫–æ–≤: {max_workers})")
        return classify_tasks_batch_mode(tasks_df, categories_df, batch_size, data_folder, save_timestamped, max_workers, max_retries)


def classify_tasks_single_mode(tasks_df, categories_df, data_folder, save_timestamped, max_workers, max_retries):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
    classified_df = tasks_df.copy()
    classified_df['assigned_category'] = ''
    classified_df['category_id'] = 0
    classified_df['classification_confidence'] = 'llm'
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    success_count = 0
    error_count = 0
    retry_count = 0
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (index, row)
    task_data = [(index, row) for index, row in tasks_df.iterrows()]
    
    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        future_to_task = {
            executor.submit(classify_single_task_with_retries, data, categories_df, max_retries): data[0] 
            for data in task_data
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        with tqdm(total=len(tasks_df), 
                  desc="üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á", 
                  unit="–∑–∞–¥–∞—á–∞",
                  ncols=80,
                  leave=True,
                  dynamic_ncols=False,
                  miniters=0,
                  mininterval=0.5,
                  maxinterval=2.0,
                  smoothing=0.3,
                  position=0,
                  ascii=True,
                  bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]') as pbar:
            
            for future in as_completed(future_to_task):
                index, category, success, error_msg = future.result()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                classified_df.loc[index, 'assigned_category'] = category
                
                # –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_row = categories_df[categories_df['–ù–∞–∑–≤–∞–Ω–∏–µ'] == category]
                if not category_row.empty:
                    classified_df.loc[index, 'category_id'] = category_row.index[0] + 1
                
                if success:
                    success_count += 1
                else:
                    error_count += 1
                    if "–ü–æ–ø—ã—Ç–∫–∞" in str(error_msg):
                        retry_count += 1
                
                pbar.update(1)
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{len(tasks_df)} –∑–∞–¥–∞—á")
    
    return save_classification_results(classified_df, data_folder, save_timestamped)


def classify_tasks_batch_mode(tasks_df, categories_df, batch_size, data_folder, save_timestamped, max_workers, max_retries):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –±–∞—Ç—á–∞–º–∏ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
    classified_df = tasks_df.copy()
    classified_df['assigned_category'] = ''
    classified_df['category_id'] = 0
    classified_df['classification_confidence'] = 'llm'
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
    total_batches = (len(tasks_df) + batch_size - 1) // batch_size
    print(f"üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {total_batches} –±–∞—Ç—á–µ–π –ø–æ {batch_size} –∑–∞–¥–∞—á (–ø–æ—Ç–æ–∫–æ–≤: {max_workers})")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    batch_data = []
    for i in range(0, len(tasks_df), batch_size):
        batch_num = (i // batch_size) + 1
        tasks_batch = tasks_df.iloc[i:i+batch_size]
        batch_data.append((tasks_batch, batch_num, total_batches))
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    success_count = 0
    error_count = 0
    retry_count = 0
    
    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–∞—Ç—á–∏ –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        future_to_batch = {
            executor.submit(classify_batch_with_retries, data, categories_df, max_retries): data[1] 
            for data in batch_data
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        with tqdm(total=total_batches, 
                  desc="üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π", 
                  unit="–±–∞—Ç—á",
                  ncols=80,
                  leave=True,
                  dynamic_ncols=False,
                  miniters=0,
                  mininterval=0.5,
                  maxinterval=2.0,
                  smoothing=0.3,
                  position=0,
                  ascii=True,
                  bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]') as pbar:
            
            for future in as_completed(future_to_batch):
                batch_num, classifications, success, error_msg = future.result()
                
                if success:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    apply_batch_classifications(classified_df, classifications, categories_df)
                    success_count += 1
                else:
                    error_count += 1
                    if "–ü–æ–ø—ã—Ç–∫–∞" in str(error_msg):
                        retry_count += 1
                
                pbar.update(1)
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{total_batches} –±–∞—Ç—á–µ–π")
    
    return save_classification_results(classified_df, data_folder, save_timestamped)


def apply_batch_classifications(classified_df, classifications, categories_df):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–∞—Ç—á–∞ –∫ DataFrame"""
    for task_key, category_name in classifications.items():
        # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ –∫–ª—é—á—É
        task_rows = classified_df[classified_df['key'] == task_key]
        if not task_rows.empty:
            task_index = task_rows.index[0]
            classified_df.loc[task_index, 'assigned_category'] = category_name
            
            # –ù–∞–π—Ç–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_row = categories_df[categories_df['–ù–∞–∑–≤–∞–Ω–∏–µ'] == category_name]
            if not category_row.empty:
                classified_df.loc[task_index, 'category_id'] = category_row.index[0] + 1


def save_classification_results(classified_df, data_folder, save_timestamped):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª—ã"""
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    classified_count = (classified_df['assigned_category'] != '').sum()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if classified_count > 0:
        category_counts = classified_df[classified_df['assigned_category'] != '']['assigned_category'].value_counts()
        print(f"üìä –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([f'{cat} ({count})' for cat, count in category_counts.head(3).items()])}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success1 = True
    results_file = None
    
    if save_timestamped:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        results_file = os.path.join(data_folder, f"classified_tasks_{timestamp}.xlsx")
        success1 = safe_save_excel(classified_df, results_file, 'Classified_Tasks', show_success_message=False)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    main_results_file = os.path.join(data_folder, "classified_tasks.xlsx")
    success2 = safe_save_excel(classified_df, main_results_file, 'Classified_Tasks', show_success_message=False)
    
    if save_timestamped and success1 and success2:
        return classified_df, results_file
    elif success2:
        return classified_df, main_results_file
    else:
        return classified_df, None


def main_classification():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á"""
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        tasks_df, categories_df = load_tasks_and_categories()
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        classified_df, results_file = classify_all_tasks(tasks_df, categories_df)
        
        print("\nüéâ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        return classified_df, results_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None


if __name__ == "__main__":
    main_classification()
