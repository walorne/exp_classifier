"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é Qwen3-Coder
"""
import argparse
import sys
import os
from typing import Optional
# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from clients.ai_client import LocalGPTClient, create_default_client


def interactive_mode(client: LocalGPTClient):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –º–æ–¥–µ–ª—å—é"""
    print("ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –º–æ–¥–µ–ª—å—é Qwen3-Coder")
    print("–í–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("–í–≤–µ–¥–∏—Ç–µ 'clear' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("-" * 50)
    
    conversation_history = []
    
    while True:
        try:
            user_input = input("\nüë§ –í—ã: ").strip()
            
            if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                break
            
            if user_input.lower() in ['clear', '–æ—á–∏—Å—Ç–∏—Ç—å']:
                conversation_history = []
                print("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞")
                continue
            
            if not user_input:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_history.append({"role": "user", "content": user_input})
            
            print("ü§ñ –ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            response = client.chat_completion(conversation_history)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            assistant_message = response["choices"][0]["message"]["content"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_history.append({"role": "assistant", "content": assistant_message})
            
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {assistant_message}")
            
        except KeyboardInterrupt:
            print("\n\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã... –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def single_request_mode(client: LocalGPTClient, prompt: str, system_message: Optional[str] = None):
    """–†–µ–∂–∏–º –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        print(f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {prompt}")
        response = client.simple_chat(prompt, system_message)
        print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{response}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        sys.exit(1)


def test_connection(client: LocalGPTClient):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥–µ–ª–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
    
    if not client.health_check():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É:", client.api_base)
        print("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞:", client.api_key[:10] + "...")
        print("- –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        sys.exit(1)
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
    try:
        models = client.get_models()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models.get('data', []))}")
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {client.model}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {e}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    try:
        print("\nüß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        test_response = client.simple_chat("–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {test_response}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é Qwen3-Coder",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py                              # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  python main.py --test                       # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  python main.py --prompt "–ü—Ä–∏–≤–µ—Ç, –º–æ–¥–µ–ª—å!"   # –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  python main.py --prompt "–ù–∞–ø–∏—à–∏ –∫–æ–¥" --system "–¢—ã Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
        """
    )
    
    parser.add_argument(
        "--prompt", "-p",
        type=str,
        help="–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ–ª–∏"
    )
    
    parser.add_argument(
        "--system", "-s",
        type=str,
        help="–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"
    )
    
    parser.add_argument(
        "--test", "-t",
        action="store_true",
        help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"
    )
    
    parser.add_argument(
        "--api-base",
        type=str,
        help="–ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
    )
    
    parser.add_argument(
        "--api-key",
        type=str,
        help="API –∫–ª—é—á (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
    )
    
    parser.add_argument(
        "--model",
        type=str,
        help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    if args.api_base or args.api_key or args.model:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        from clients.ai_client import DEFAULT_CONFIG
        config = DEFAULT_CONFIG.copy()
        
        if args.api_base:
            config["api_base"] = args.api_base
        if args.api_key:
            config["api_key"] = args.api_key
        if args.model:
            config["model"] = args.model
            
        client = LocalGPTClient(**config)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        client = create_default_client()
    
    print("üöÄ –ö–ª–∏–µ–Ω—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ Qwen3-Coder –∑–∞–ø—É—â–µ–Ω")
    print(f"üåê API: {client.api_base}")
    print(f"üéØ –ú–æ–¥–µ–ª—å: {client.model}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if args.test:
        test_connection(client)
    elif args.prompt:
        single_request_mode(client, args.prompt, args.system)
    else:
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_connection(client)
        print("\n" + "="*50)
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interactive_mode(client)


if __name__ == "__main__":
    main()
