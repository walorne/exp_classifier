"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ JIRA –∑–∞–¥–∞—á
"""
import re
from pipeline.jira_tasks_fetcher import fetch_and_save_tasks
from pipeline.task_summarizer import summarize_tasks
from pipeline.category_generator import generate_categories_from_tasks
from pipeline.category_consolidator import create_final_categories
from pipeline.task_classifier import classify_all_tasks, load_tasks_and_categories

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê =====
# JQL = "project = MPSM AND issueFunction in issuesInEpics(\"ERP_JOBs ~ '00-00377754#000000002'\") AND created >= 2024-09-01 ORDER BY created DESC"
JQL = "(project =  \"–ú–ü Funday\" OR project =  \"–ú–ü –û—Å—Ç–∏–Ω\" )  AND issueFunction in issuesInEpics(\"ERP_JOBs ~'00-00377754#000000001'\") AND created >= 2024-09-01 ORDER BY created DESC"
CATEGORY_FINAL_COUNT = 15
DATA_FOLDER = "classification_data"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ JIRA
JIRA_CHUNK_SIZE = 50      # –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ JIRA (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 25-100)
MAX_TASKS_LIMIT = None     # –õ–∏–º–∏—Ç –∑–∞–¥–∞—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (None = –≤—Å–µ)


# ===== –ù–ê–°–¢–†–û–ô–ö–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –§–ê–ô–õ–û–í =====
SAVE_TIMESTAMPED_FILES = False  # True - —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∞–π–ª—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏, False - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–°–¢–ò –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–ò=====
SUMMARIZATION_THREADS = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-5)
SUMMARIZATION_RETRIES = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_GENERATION_THREADS = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2-3)
CATEGORY_GENERATION_BATCH_SIZE = 5  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-10)
CATEGORY_GENERATION_RETRIES = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á
CLASSIFICATION_THREADS = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-7)
CLASSIFICATION_MODE = "single"  # "single" - –ø–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ (—Ç–æ—á–Ω–µ–µ), "batch" - –±–∞—Ç—á–∞–º–∏ (–±—ã—Å—Ç—Ä–µ–µ)
CLASSIFICATION_BATCH_SIZE = 15  # –í —Ä–µ–∂–∏–º–µ batch - –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ LLM (–º–µ–Ω—å—à–µ = —Ç–æ—á–Ω–µ–µ)
CLASSIFICATION_RETRIES = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ


# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –≠–¢–ê–ü–û–í PIPELINE =====
# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–∫–∏–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å (True/False)
PIPELINE_STEPS = {
    'fetch_tasks': True,        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ JIRA
    'summarize_tasks': True,    # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á (–Ω–æ–≤—ã–π —ç—Ç–∞–ø)
    'generate_categories': True, # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    'consolidate_categories': True, # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    'classify_tasks': True      # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á
}



def extract_project_from_jql(jql_query):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ JQL –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        jql_query (str): JQL –∑–∞–ø—Ä–æ—Å
    
    Returns:
        str: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    
    Raises:
        ValueError: –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –≤ JQL –∑–∞–ø—Ä–æ—Å–µ
    """
    if not jql_query:
        raise ValueError("JQL –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π")
    
    # –ò—â–µ–º project = "PROJECT_NAME" –∏–ª–∏ project in ("PROJ1", "PROJ2") –∏–ª–∏ project = PROJECT_NAME
    project_patterns = [
        r'project\s*=\s*"([^"]+)"',  # project = "PROJECT_NAME"
        r'project\s*=\s*([A-Z][A-Z0-9_]+)',  # project = PROJECT_NAME
        r'project\s*in\s*\(\s*"([^"]+)"',  # project in ("PROJECT_NAME", ...)
        r'project\s*in\s*\(\s*([A-Z][A-Z0-9_]+)'  # project in (PROJECT_NAME, ...)
    ]
    
    for pattern in project_patterns:
        match = re.search(pattern, jql_query, re.IGNORECASE)
        if match:
            return match.group(1).strip()
    
    raise ValueError(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JQL –∑–∞–ø—Ä–æ—Å–µ: {jql_query}")


def get_project_data_folder(jql_query, base_data_folder):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ JQL –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        jql_query (str): JQL –∑–∞–ø—Ä–æ—Å
        base_data_folder (str): –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        tuple: (project_name, project_folder_path)
    
    Raises:
        ValueError: –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JQL –∑–∞–ø—Ä–æ—Å–µ
    """
    project_name = extract_project_from_jql(jql_query)
    project_folder = f"{base_data_folder}/{project_name}"
    return project_name, project_folder


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ JIRA –∑–∞–¥–∞—á")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç—Ç–∞–ø–æ–≤
    print("\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –≠–¢–ê–ü–û–í:")
    for step, enabled in PIPELINE_STEPS.items():
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        print(f"   {step}: {status}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ JQL –∑–∞–ø—Ä–æ—Å–∞
    try:
        project_name, project_folder = get_project_data_folder(JQL, DATA_FOLDER)
        print(f"\nüéØ –ü—Ä–æ–µ–∫—Ç: {project_name}")
        print(f"üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_folder}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º DATA_FOLDER –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        DATA_FOLDER_PROJECT = project_folder
        
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
    tasks_df = None
    tasks_file = None
    summarized_df = None
    summarized_file = None
    categories_df = None
    categories_file = None
    final_categories_df = None
    final_file = None
    
    # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ JIRA
    if PIPELINE_STEPS['fetch_tasks']:
        print("\nüìã –≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ JIRA")
        tasks_df, tasks_file = fetch_and_save_tasks(
            jql_query=JQL,
            data_folder=DATA_FOLDER_PROJECT,
            chunk_size=JIRA_CHUNK_SIZE,
            max_results=MAX_TASKS_LIMIT,
            save_timestamped=SAVE_TIMESTAMPED_FILES
        )
    else:
        print("\n‚è≠Ô∏è –≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ JIRA - –ü–†–û–ü–£–©–ï–ù")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
        print("   üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞")
        return
    
    # –≠—Ç–∞–ø 2: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á (–ù–û–í–´–ô)
    if PIPELINE_STEPS['summarize_tasks']:
        print("\nüìù –≠–¢–ê–ü 2: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á")
        summarized_df, summarized_file = summarize_tasks(
            tasks_df=tasks_df,
            project_folder=DATA_FOLDER_PROJECT,
            save_timestamped=SAVE_TIMESTAMPED_FILES,
            max_workers=SUMMARIZATION_THREADS,
            max_retries=SUMMARIZATION_RETRIES
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        working_df = summarized_df
    else:
        print("\n‚è≠Ô∏è –≠–¢–ê–ü 2: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á - –ü–†–û–ü–£–©–ï–ù")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        working_df = tasks_df
    
    # –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if PIPELINE_STEPS['generate_categories']:
        print("\nü§ñ –≠–¢–ê–ü 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        categories_df, categories_file = generate_categories_from_tasks(
            tasks_df=working_df,
            batch_size=CATEGORY_GENERATION_BATCH_SIZE,
            data_folder=DATA_FOLDER_PROJECT,
            save_timestamped=SAVE_TIMESTAMPED_FILES,
            max_workers=CATEGORY_GENERATION_THREADS,
            max_retries=CATEGORY_GENERATION_RETRIES
        )
    else:
        print("\n‚è≠Ô∏è –≠–¢–ê–ü 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ü–†–û–ü–£–©–ï–ù")
    
    # –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if PIPELINE_STEPS['consolidate_categories'] and categories_df is not None:
        print("\nüéØ –≠–¢–ê–ü 4: –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        final_categories_df, final_file = create_final_categories(
            categories_df=categories_df,
            target_count=CATEGORY_FINAL_COUNT,
            data_folder=DATA_FOLDER_PROJECT,
            save_timestamped=SAVE_TIMESTAMPED_FILES
        )
    else:
        print("\n‚è≠Ô∏è –≠–¢–ê–ü 4: –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ü–†–û–ü–£–©–ï–ù")
    
    # –≠—Ç–∞–ø 5: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if PIPELINE_STEPS['classify_tasks'] and final_categories_df is not None:
        print("\nüè∑Ô∏è –≠–¢–ê–ü 5: –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á–∞–º")
        classified_df, classified_file = classify_all_tasks(
            tasks_df=working_df,
            categories_df=final_categories_df,
            batch_size=CLASSIFICATION_BATCH_SIZE,
            data_folder=DATA_FOLDER_PROJECT,
            save_timestamped=SAVE_TIMESTAMPED_FILES,
            max_workers=CLASSIFICATION_THREADS,
            classification_mode=CLASSIFICATION_MODE,
            max_retries=CLASSIFICATION_RETRIES
        )
    else:
        print("\n‚è≠Ô∏è –≠–¢–ê–ü 5: –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á–∞–º - –ü–†–û–ü–£–©–ï–ù")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "=" * 50)
    print("‚úÖ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
    if tasks_df is not None:
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {len(tasks_df)}")
    if categories_df is not None:
        print(f"üè∑Ô∏è –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories_df)}")
    if final_categories_df is not None:
        print(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(final_categories_df)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    try:
        if 'classified_df' in locals() and classified_df is not None:
            classified_count = (classified_df['assigned_category'] != '').sum()
            print(f"üìã –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {classified_count}")
    except:
        pass
    
    # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    if tasks_file:
        print(f"   üìÑ –ó–∞–¥–∞—á–∏: {tasks_file}")
    if 'summarized_file' in locals() and summarized_file:
        print(f"   üìÑ –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {summarized_file}")
    if categories_file:
        print(f"   üìÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_file}")
    if 'final_file' in locals() and final_file:
        print(f"   üìÑ –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {final_file}")
    if 'classified_file' in locals() and classified_file:
        print(f"   üìÑ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {classified_file}")
    
    print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∏–∑–º–µ–Ω–∏—Ç–µ PIPELINE_STEPS –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")


if __name__ == "__main__":
    main()