from jira import JIRA
from dotenv import load_dotenv
from clients.jira_client import get_jira_client
import pandas as pd
from clients.ai_client import create_default_client
import os
from datetime import datetime
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
JQL = "project = MPSM AND issueFunction in issuesInEpics(\"ERP_JOBs ~ '00-00377754#000000002'\") AND created >= 2025-08-01 ORDER BY created DESC"
CATEGORY_FINAL_COUNT = 10

jira = get_jira_client()

issues = jira.search_issues(JQL, maxResults=False)  # –ü–æ–ª—É—á–∏—Ç—å –¥–æ 1000 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

print(len(issues))

def clean_description(desc):
    """–û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not desc:
        return ''
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    desc = desc.replace('\n', ' ').replace('\r', ' ')
    desc = ' '.join(desc.split())  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    
    # –£–¥–∞–ª—è–µ–º JIRA —Ä–∞–∑–º–µ—Ç–∫—É
    desc = re.sub(r'\{[^}]*\}', '', desc)  # {code}, {quote}, etc.
    desc = re.sub(r'\[[^\]]*\]', '', desc)  # [~username], [link]
    desc = re.sub(r'h[1-6]\.\s*', '', desc)  # h1. h2. –∑–∞–≥–æ–ª–æ–≤–∫–∏
    desc = re.sub(r'\*[^*]*\*', '', desc)  # *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*
    desc = re.sub(r'_[^_]*_', '', desc)  # _–∫—É—Ä—Å–∏–≤_
    
    # –£–±–∏—Ä–∞–µ–º URL
    desc = re.sub(r'https?://\S+', '', desc)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    desc = re.sub(r'[^\w\s\-.,!?()]', ' ', desc, flags=re.UNICODE)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤
    desc = ' '.join(desc.split())
    
    return desc

# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –≤ DataFrame
data = []
for issue in issues:
    data.append({
        'key': issue.key,
        'title': issue.fields.summary,
        'description': clean_description(issue.fields.description),
        'issuetype': issue.fields.issuetype.name,
        'time_spent': getattr(issue.fields, 'timespent', 0) or 0,
        'processing_stage': 'new',  # –≠—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
        'category_id': '',          # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
        'batch_processed': 0        # –ù–æ–º–µ—Ä –±–∞—Ç—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    })

df = pd.DataFrame(data)
# print(df)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
data_folder = "classification_data"
os.makedirs(data_folder, exist_ok=True)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ Excel
timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
tasks_file = os.path.join(data_folder, f"tasks_{timestamp}.xlsx")
df.to_excel(tasks_file, index=False, sheet_name='Tasks')

print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª: {tasks_file}")

# –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–¥–∞—á
main_tasks_file = os.path.join(data_folder, "tasks.xlsx")
df.to_excel(main_tasks_file, index=False, sheet_name='Tasks')
print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–¥–∞—á: {main_tasks_file}")

# –°–æ–∑–¥–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
llm_client = create_default_client()

def process_batch_for_categories(batch_tasks, batch_num, total_batches):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    texts_for_classification = []
    for _, row in batch_tasks.iterrows():
        text = f"–¢–∏–ø: {row['issuetype']}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {row['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {row['description']}"
        texts_for_classification.append(text)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É IT-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ JIRA –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞–π –æ—Ç 3 –¥–æ 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞
2. –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
3. –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏ –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å —Ä–∞–±–æ—Ç—ã
4. –ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏—Ö –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

–ó–ê–î–ê–ß–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê (–±–∞—Ç—á {batch_num}/{total_batches}):
{chr(10).join([f"{i+1}. {text}" for i, text in enumerate(texts_for_classification)])}

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π):
–ù–∞–∑–≤–∞–Ω–∏–µ;–û–ø–∏—Å–∞–Ω–∏–µ;–ö–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞;–¢–∏–ø—ã_–∑–∞–¥–∞—á

–ü—Ä–∏–º–µ—Ä:
API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏;–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π;api,–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è,–Ω–∞—Å—Ç—Ä–æ–π–∫–∞,—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞;Task,Story
–†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏;–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –±–∞–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ;–æ—à–∏–±–∫–∞,–±–∞–≥,–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,–æ—Ç–ª–∞–¥–∫–∞;Bug,Task

–í–ê–ñ–ù–û: 
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
- –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""

    print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–∞—Ç—á {batch_num}/{total_batches} ({len(batch_tasks)} –∑–∞–¥–∞—á)...")
    response = llm_client.simple_chat(prompt)
    return response

def parse_categories_response(response_text):
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = []
    lines = response_text.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        if not line or line.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ') or line.startswith('#'):
            continue
            
        parts = line.split(';')
        if len(parts) >= 4:
            categories.append({
                '–ù–∞–∑–≤–∞–Ω–∏–µ': parts[0].strip(),
                '–û–ø–∏—Å–∞–Ω–∏–µ': parts[1].strip(),
                '–ö–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞': parts[2].strip(),
                '–¢–∏–ø—ã_–∑–∞–¥–∞—á': parts[3].strip()
            })
    
    return categories

# –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
batch_size = 50
all_categories = []

# –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
total_batches = (len(df) + batch_size - 1) // batch_size
print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(df)}")
print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π: {total_batches}")

for i in range(0, len(df), batch_size):
    batch_num = (i // batch_size) + 1
    batch_tasks = df.iloc[i:i+batch_size]
    
    try:
        response = process_batch_for_categories(batch_tasks, batch_num, total_batches)
        batch_categories = parse_categories_response(response)
        
        print(f"‚úÖ –ë–∞—Ç—á {batch_num}: –ø–æ–ª—É—á–µ–Ω–æ {len(batch_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        all_categories.extend(batch_categories)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {batch_num}: {e}")
        continue

# –°–æ–∑–¥–∞–µ–º DataFrame —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
categories_df = pd.DataFrame(all_categories)

# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
categories_df = categories_df.drop_duplicates(subset=['–ù–∞–∑–≤–∞–Ω–∏–µ'], keep='first')

print(f"\nüìã –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories_df)}")
print(categories_df)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ Excel
categories_file = os.path.join(data_folder, f"categories_{timestamp}.xlsx")
categories_df.to_excel(categories_file, index=False, sheet_name='Categories')

print(f"\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {categories_file}")

# –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–π
main_categories_file = os.path.join(data_folder, "categories.xlsx")
categories_df.to_excel(main_categories_file, index=False, sheet_name='Categories')
print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {main_categories_file}")

def consolidate_categories(categories_df, target_count=CATEGORY_FINAL_COUNT):
    """–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    categories_text = ""
    for idx, row in categories_df.iterrows():
        categories_text += f"{idx+1}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}: {row['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
    
    prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ IT-–∑–∞–¥–∞—á.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–π–¥–∏ –ø–æ—Ö–æ–∂–∏–µ –ø–æ —Å–º—ã—Å–ª—É
2. –û–±—ä–µ–¥–∏–Ω–∏ –ø–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ–¥–Ω—É
3. –°–æ–∑–¥–∞–π —Ä–æ–≤–Ω–æ {target_count} –∏—Ç–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
4. –ù–ï–õ–¨–ó–Ø —É–¥–∞–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å!

–ò–°–•–û–î–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:
{categories_text}

–ü–†–ê–í–ò–õ–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:
- –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å –í–°–ï–• –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å - –æ—Å—Ç–∞–≤—å –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
- –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ {target_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π):
–ù–∞–∑–≤–∞–Ω–∏–µ;–û–ø–∏—Å–∞–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä:
API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏;–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –±–∞–≥–æ–≤;–ê–Ω–∞–ª–∏–∑, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ, –æ—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

–í–ê–ñ–ù–û:
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫  
- –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
- –†–æ–≤–Ω–æ {target_count} —Å—Ç—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ"""

    print(f"\nüîÑ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É—é {len(categories_df)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ {target_count}...")
    response = llm_client.simple_chat(prompt)
    return response

def parse_consolidated_categories(response_text):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = []
    lines = response_text.strip().split('\n')
    
    for line in lines:
        line = line.strip()
        if not line or line.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ') or line.startswith('#'):
            continue
            
        parts = line.split(';')
        if len(parts) >= 2:
            categories.append({
                '–ù–∞–∑–≤–∞–Ω–∏–µ': parts[0].strip(),
                '–û–ø–∏—Å–∞–Ω–∏–µ': parts[1].strip()
            })
    
    return categories

# –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
if len(categories_df) > 10:
    print(f"\nüìä –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: {len(categories_df)} ‚Üí 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    try:
        consolidated_response = consolidate_categories(categories_df, target_count=10)
        consolidated_categories = parse_consolidated_categories(consolidated_response)
        
        if len(consolidated_categories) == 10:
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            final_categories_df = pd.DataFrame(consolidated_categories)
            
            print(f"‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(final_categories_df)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            print("\nüìã –ò–¢–û–ì–û–í–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:")
            for idx, row in final_categories_df.iterrows():
                print(f"{idx+1}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            final_categories_file = os.path.join(data_folder, f"final_categories_{timestamp}.xlsx")
            final_categories_df.to_excel(final_categories_file, index=False, sheet_name='Final_Categories')
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏—Ç–æ–≥–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            main_final_file = os.path.join(data_folder, "final_categories.xlsx")
            final_categories_df.to_excel(main_final_file, index=False, sheet_name='Final_Categories')
            
            print(f"\n‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            print(f"   üìÑ {final_categories_file}")
            print(f"   üìÑ {main_final_file}")
            
        else:
            print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(consolidated_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–º–µ—Å—Ç–æ 10")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
else:
    print(f"\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —É–∂–µ {len(categories_df)} - –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

