"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ LocalGPT
"""
import json
import time
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ clients
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from clients.client import LocalGPTClient, create_default_client


class ModelManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    
    def __init__(self, client: LocalGPTClient):
        self.client = client
        self._models_cache = None
        self._models_cache_time = None
        self.cache_duration = 300  # 5 –º–∏–Ω—É—Ç
    
    def get_available_models(self, force_refresh: bool = False) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        """
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (not force_refresh and 
            self._models_cache is not None and 
            self._models_cache_time is not None and 
            current_time - self._models_cache_time < self.cache_duration):
            return self._models_cache
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        try:
            models_response = self.client.get_models()
            self._models_cache = models_response.get('data', [])
            self._models_cache_time = current_time
            return self._models_cache
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            return []
    
    def print_models_info(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö"""
        models = self.get_available_models()
        
        if not models:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        print("-" * 80)
        
        for i, model in enumerate(models, 1):
            model_id = model.get('id', 'N/A')
            created = model.get('created', 0)
            owned_by = model.get('owned_by', 'N/A')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            if created:
                created_time = datetime.fromtimestamp(created).strftime('%Y-%m-%d %H:%M:%S')
            else:
                created_time = 'N/A'
            
            print(f"{i:2d}. üéØ ID: {model_id}")
            print(f"    üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_time}")
            print(f"    üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owned_by}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'object' in model:
                print(f"    üîß –¢–∏–ø: {model['object']}")
            
            print()
    
    def switch_model(self, model_id: str) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
        
        Args:
            model_id: ID –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        models = self.get_available_models()
        available_ids = [model.get('id') for model in models]
        
        if model_id not in available_ids:
            print(f"‚ùå –ú–æ–¥–µ–ª—å '{model_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(available_ids)}")
            return False
        
        old_model = self.client.model
        self.client.model = model_id
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
        try:
            test_response = self.client.simple_chat("test")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å —Å '{old_model}' –Ω–∞ '{model_id}'")
            return True
        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
            self.client.model = old_model
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –º–æ–¥–µ–ª—å '{model_id}': {e}")
            return False


class ConversationLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
    
    def __init__(self, log_dir: str = "logs"):
        self.log_dir = log_dir
        self.current_session = None
        self.session_start_time = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(log_dir, exist_ok=True)
    
    def start_session(self, session_name: Optional[str] = None) -> str:
        """
        –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            ID —Å–µ—Å—Å–∏–∏
        """
        self.session_start_time = datetime.now()
        
        if session_name:
            session_id = f"{session_name}_{self.session_start_time.strftime('%Y%m%d_%H%M%S')}"
        else:
            session_id = f"session_{self.session_start_time.strftime('%Y%m%d_%H%M%S')}"
        
        self.current_session = {
            "session_id": session_id,
            "start_time": self.session_start_time.isoformat(),
            "messages": [],
            "metadata": {
                "model": None,
                "api_base": None
            }
        }
        
        return session_id
    
    def log_message(self, role: str, content: str, model: Optional[str] = None, 
                   api_base: Optional[str] = None, metadata: Optional[Dict] = None):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
        
        Args:
            role: –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (user/assistant/system)
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            model: –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å
            api_base: API endpoint
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        if not self.current_session:
            self.start_session()
        
        message = {
            "timestamp": datetime.now().isoformat(),
            "role": role,
            "content": content
        }
        
        if metadata:
            message["metadata"] = metadata
        
        self.current_session["messages"].append(message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if model:
            self.current_session["metadata"]["model"] = model
        if api_base:
            self.current_session["metadata"]["api_base"] = api_base
    
    def save_session(self, filename: Optional[str] = None) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if not self.current_session:
            raise ValueError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        if not filename:
            filename = f"{self.current_session['session_id']}.json"
        
        filepath = os.path.join(self.log_dir, filename)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        self.current_session["end_time"] = datetime.now().isoformat()
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(self.current_session, f, ensure_ascii=False, indent=2)
        
        return filepath
    
    def load_session(self, filepath: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        """
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def list_sessions(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        if not os.path.exists(self.log_dir):
            return []
        
        sessions = []
        for filename in os.listdir(self.log_dir):
            if filename.endswith('.json'):
                sessions.append(os.path.join(self.log_dir, filename))
        
        return sorted(sessions, key=os.path.getmtime, reverse=True)


class ModelBenchmark:
    """–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, client: LocalGPTClient):
        self.client = client
    
    def measure_response_time(self, prompt: str, iterations: int = 3) -> Tuple[float, float, List[float]]:
        """
        –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        
        Args:
            prompt: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            iterations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Å—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è, –º–µ–¥–∏–∞–Ω–∞, —Å–ø–∏—Å–æ–∫_–≤—Ä–µ–º–µ–Ω)
        """
        times = []
        
        for i in range(iterations):
            start_time = time.time()
            try:
                self.client.simple_chat(prompt)
                end_time = time.time()
                response_time = end_time - start_time
                times.append(response_time)
                print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}: {response_time:.2f}s")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i+1}: {e}")
        
        if not times:
            return 0.0, 0.0, []
        
        avg_time = sum(times) / len(times)
        sorted_times = sorted(times)
        median_time = sorted_times[len(sorted_times) // 2]
        
        return avg_time, median_time, times
    
    def run_benchmark(self, test_prompts: Optional[List[str]] = None) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫
        
        Args:
            test_prompts: –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞
        """
        if not test_prompts:
            test_prompts = [
                "–ü—Ä–∏–≤–µ—Ç!",
                "–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.",
                "–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ Python.",
                "–ü–µ—Ä–µ–≤–µ–¥–∏ 'Hello, world!' –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."
            ]
        
        results = {
            "model": self.client.model,
            "api_base": self.client.api_base,
            "timestamp": datetime.now().isoformat(),
            "tests": []
        }
        
        for i, prompt in enumerate(test_prompts, 1):
            print(f"\nüß™ –¢–µ—Å—Ç {i}/{len(test_prompts)}: {prompt[:50]}...")
            
            avg_time, median_time, times = self.measure_response_time(prompt)
            
            test_result = {
                "prompt": prompt,
                "avg_time": avg_time,
                "median_time": median_time,
                "times": times,
                "success_rate": len(times) / 3  # –ò–∑ 3 –ø–æ–ø—ã—Ç–æ–∫
            }
            
            results["tests"].append(test_result)
            
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}s")
            print(f"üìä –ú–µ–¥–∏–∞–Ω–∞: {median_time:.2f}s")
        
        return results


def interactive_model_selector(client: LocalGPTClient) -> Optional[str]:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    
    Args:
        client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        
    Returns:
        ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ None
    """
    manager = ModelManager(client)
    models = manager.get_available_models()
    
    if not models:
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    print("-" * 50)
    
    for i, model in enumerate(models, 1):
        model_id = model.get('id', 'N/A')
        print(f"{i:2d}. {model_id}")
    
    print(f"{len(models)+1:2d}. –û—Ç–º–µ–Ω–∞")
    
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (1-{len(models)+1}): ").strip()
            
            if not choice:
                continue
            
            choice_num = int(choice)
            
            if choice_num == len(models) + 1:
                print("–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")
                return None
            
            if 1 <= choice_num <= len(models):
                selected_model = models[choice_num - 1]['id']
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}")
                return selected_model
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(models)+1}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except KeyboardInterrupt:
            print("\n–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")
            return None


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç"""
    print("üõ†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç LocalGPT")
    
    client = create_default_client()
    
    # –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π
    print("\n1Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö:")
    manager = ModelManager(client)
    manager.print_models_info()
    
    # –¢–µ—Å—Ç –ª–æ–≥–≥–µ—Ä–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ª–æ–≥–≥–µ—Ä–∞:")
    logger = ConversationLogger()
    session_id = logger.start_session("demo")
    logger.log_message("user", "–ü—Ä–∏–≤–µ—Ç!", client.model, client.api_base)
    logger.log_message("assistant", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", client.model, client.api_base)
    
    log_file = logger.save_session()
    print(f"üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    
    # –¢–µ—Å—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞ (–±—ã—Å—Ç—Ä—ã–π)
    print("\n3Ô∏è‚É£ –ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫:")
    benchmark = ModelBenchmark(client)
    results = benchmark.run_benchmark(["–ü—Ä–∏–≤–µ—Ç!"])
    
    avg_time = results["tests"][0]["avg_time"]
    print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f}s")


if __name__ == "__main__":
    main()
