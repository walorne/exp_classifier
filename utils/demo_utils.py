"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏ LocalGPT
"""
import argparse
import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from clients.client import create_default_client
from .utils import ModelManager, ConversationLogger, ModelBenchmark, interactive_model_selector


def demo_models(client):
    """–î–µ–º–æ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏"""
    print("üéØ === –î–ï–ú–û: –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–µ–ª—è–º–∏ ===")
    
    manager = ModelManager(client)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    manager.print_models_info()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    print("\nüîÑ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:")
    selected_model = interactive_model_selector(client)
    
    if selected_model and selected_model != client.model:
        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        if manager.switch_model(selected_model):
            print(f"‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {client.model}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å")


def demo_logger(client):
    """–î–µ–º–æ –ª–æ–≥–≥–µ—Ä–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
    print("\nüìù === –î–ï–ú–û: –õ–æ–≥–≥–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ===")
    
    logger = ConversationLogger()
    
    # –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é
    session_id = logger.start_session("demo_session")
    print(f"üé¨ –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è: {session_id}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conversation = [
        ("user", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"),
        ("assistant", "–ü—Ä–∏–≤–µ—Ç! –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"),
        ("user", "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"),
        ("assistant", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–æ–º–æ–π –∏ –≥–æ–≤–æ—Ä–∏—Ç –∂–µ–Ω–µ: '–î–æ—Ä–æ–≥–∞—è, —è –∏—Å–ø—Ä–∞–≤–∏–ª –±–∞–≥!' –ñ–µ–Ω–∞: '–ö–∞–∫–æ–π?' –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: '–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–∞–¥–∞–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ!'")
    ]
    
    for role, content in conversation:
        logger.log_message(role, content, client.model, client.api_base)
        print(f"üì® {role}: {content[:50]}...")
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
    log_file = logger.save_session()
    print(f"üíæ –†–∞–∑–≥–æ–≤–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {log_file}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
    sessions = logger.list_sessions()
    print(f"üìö –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
    
    return log_file


def demo_benchmark(client):
    """–î–µ–º–æ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° === –î–ï–ú–û: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")
    
    benchmark = ModelBenchmark(client)
    
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    test_prompts = [
        "–ü—Ä–∏–≤–µ—Ç!",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ Python?",
        "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é hello_world()"
    ]
    
    print("üß™ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞...")
    results = benchmark.run_benchmark(test_prompts)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ù–ß–ú–ê–†–ö–ê:")
    print(f"üéØ –ú–æ–¥–µ–ª—å: {results['model']}")
    print(f"üåê API: {results['api_base']}")
    print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results['timestamp']}")
    print("-" * 60)
    
    total_avg = 0
    for i, test in enumerate(results['tests'], 1):
        print(f"{i}. –ó–∞–ø—Ä–æ—Å: {test['prompt'][:30]}...")
        print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {test['avg_time']:.2f}s")
        print(f"   üìà –ú–µ–¥–∏–∞–Ω–∞: {test['median_time']:.2f}s")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {test['success_rate']*100:.0f}%")
        print()
        total_avg += test['avg_time']
    
    print(f"üéØ –û–ë–©–ï–ï –°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø: {total_avg/len(results['tests']):.2f}s")
    
    return results


def demo_all(client):
    """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É—Ç–∏–ª–∏—Ç"""
    print("üöÄ === –ü–û–õ–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–¢–ò–õ–ò–¢ ===")
    
    # 1. –ú–æ–¥–µ–ª–∏
    demo_models(client)
    
    # 2. –õ–æ–≥–≥–µ—Ä
    log_file = demo_logger(client)
    
    # 3. –ë–µ–Ω—á–º–∞—Ä–∫
    results = demo_benchmark(client)
    
    print("\nüéâ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")
    print(f"üìÅ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {sum(t['avg_time'] for t in results['tests'])/len(results['tests']):.2f}s")
    print("‚ú® –í—Å–µ —É—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç LocalGPT",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python demo_utils.py                    # –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
  python demo_utils.py --models           # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ —Å –º–æ–¥–µ–ª—è–º–∏
  python demo_utils.py --logger           # –¢–æ–ª—å–∫–æ –ª–æ–≥–≥–µ—Ä
  python demo_utils.py --benchmark        # –¢–æ–ª—å–∫–æ –±–µ–Ω—á–º–∞—Ä–∫
        """
    )
    
    parser.add_argument(
        "--models", "-m",
        action="store_true",
        help="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏"
    )
    
    parser.add_argument(
        "--logger", "-l",
        action="store_true",
        help="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"
    )
    
    parser.add_argument(
        "--benchmark", "-b",
        action="store_true",
        help="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LocalGPT...")
    client = create_default_client()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not client.health_check():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        return
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üéØ –ú–æ–¥–µ–ª—å: {client.model}")
    print(f"üåê API: {client.api_base}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if args.models:
        demo_models(client)
    elif args.logger:
        demo_logger(client)
    elif args.benchmark:
        demo_benchmark(client)
    else:
        demo_all(client)


if __name__ == "__main__":
    main()
